---

AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation for OpenShift Admin Test Drive

Parameters:

  PublicHostedZone:
    Type: String
    ConstraintDescription: DNS zone for Instances and OpenShift

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: generic-qwiklab
    ConstraintDescription: Must be the name of an existing EC2 key pair.

  IdmInstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
    ConstraintDescription: Must be a valid EC2 instance type.

Mappings:
  AWSRegion2AMI:
    us-east-1:
      ami: ami-0d86375165dbc388c

  Subnet2Cidr:
    vpc:
      cidr: 10.0.0.0/16
    public1:
      cidr: 10.0.1.0/24
    public2:
      cidr: 10.0.3.0/24
    public3:
      cidr: 10.0.4.0/24

  DNSMapping:
      us-east-1:
        domain: ec2.internal
      us-west-1:
        domain: us-west-1.compute.internal
      us-west-2:
        domain: us-west-2.compute.internal
      eu-west-1:
        domain: eu-west-1.compute.internal
      eu-central-1:
        domain: eu-central-1.compute.internal
      ap-northeast-1:
        domain: ap-northeast-1.compute.internal
      ap-northeast-2:
        domain: ap-northeast-2.compute.internal
      ap-southeast-1:
        domain: ap-southeast-1.compute.internal
      ap-southeast-2:
        domain: ap-southeast-2.compute.internal
      sa-east-1:
        domain: sa-east-1.compute.internal

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - Subnet2Cidr
        - vpc
        - cidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId

  DhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: internal.aws.testdrive.openshift.com
      DomainNameServers:
        - AmazonProvidedDNS

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: VPC
      DhcpOptionsId:
        Ref: DhcpOptions

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId

  InternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId

  PublicRouteTableDefaultRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachement
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - Subnet2Cidr
        - public1
        - cidr
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  IdmSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Firewall definition for Idm
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 389
        ToPort: 389
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 88
        ToPort: 88
        CidrIp: !FindInMap [ Subnet2Cidr, vpc, cidr ]
      - IpProtocol: udp
        FromPort: 88
        ToPort: 88
        CidrIp: !FindInMap [ Subnet2Cidr, vpc, cidr ]
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: !FindInMap [ Subnet2Cidr, vpc, cidr ]
      - IpProtocol: udp
        FromPort: 464
        ToPort: 464
        CidrIp: !FindInMap [ Subnet2Cidr, vpc, cidr ]
      - IpProtocol: tcp
        FromPort: 464
        ToPort: 464
        CidrIp: !FindInMap [ Subnet2Cidr, vpc, cidr ]
      - IpProtocol: tcp
        FromPort: 749
        ToPort: 749
        CidrIp: !FindInMap [ Subnet2Cidr, vpc, cidr ]
      - IpProtocol: tcp
        FromPort: 636
        ToPort: 636
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [ Subnet2Cidr, vpc, cidr ]
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: !FindInMap [ Subnet2Cidr, vpc, cidr ]
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  Route53Records:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
      - IdmNode1
    Properties:
      HostedZoneName: !Join ['', [!Ref 'PublicHostedZone', .]]
      RecordSets:
        - Name: !Join ['', [idm., !Ref 'PublicHostedZone', .]]
          Type: A
          TTL: '900'
          ResourceRecords:
          - !GetAtt IdmNode1.PublicIp

  IdmNode1NetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet1
      GroupSet:
        - !Ref IdmSecurityGroup
      SourceDestCheck: 'false'
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId

  IdmNode1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegion2AMI
        - Ref: AWS::Region
        - ami
      InstanceType:
        Ref: IdmInstanceType
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref IdmNode1NetworkInterface
          DeviceIndex: '0'
      KeyName:
        Ref: KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '10'
            VolumeType: 'gp2'
            DeleteOnTermination: 'true'
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: idm-openshift-cns-testdrive
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config

            fqdn: idm.${PublicHostedZone}

            runcmd:
            - /usr/local/bin/idm-install > /var/log/idm-install.log
            - reboot
            - mkdir /var/www/html/pub
            - while [ ! -f /etc/ipa/ca.crt ]; do sleep 2; done 
            - cp /etc/ipa/ca.crt /var/www/html/pub/
            - chown 744 /var/www/html/pub/ca.crt

Outputs:
   LabGuide:
     Description: "IDM URL"
     Value: !Sub "https://idm.${PublicHostedZone}/"
